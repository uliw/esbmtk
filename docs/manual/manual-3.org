#+options: toc:nil author:nil num:nil
#+number-offset: 5


* Adding isotopes
 ESBMTK support the use of isotopes for many processes and species out of the box. This is best demonstrated with an example. In the following we use tow reservoirs of equal size, and apply an exchange flux. The reservoirs have similar concentrations but their isotopic ratios are different (-20 mUr versus +20 mUr [VSMOV].  After 3\space{}ky both reservoirs are isotopically homogeneous and have approached a \delta^{18}O value of 0 mUr  [VSMOV]. Note that this only required code changes on lines 17 and 23 where declare the initial delta values.
#+BEGIN_SRC jupyter-python :tangle iso_1.py :exports none
from esbmtk import (
    Model,  # the model class
    Reservoir,  # the reservoir class
    ConnectionProperties,  # the connection class
    SourceProperties,  # the source class
    SinkProperties,  # sink class
)
M = Model(
    stop="3 kyr",  # end time of model
    max_timestep="100 yr",  # upper limit of time step
    element=["Oxygen"],  # list of element definitions
)
Reservoir(
    name="S_b",  # box name
    volume="50E16 m**3",  # surface box volume
    concentration={M.O2: "200 umol/l"},  # initial concentration
    delta={M.O2: -20},
)
Reservoir(
    name="D_b",  # box name
    volume="50E16 m**3",  # deeb box volume
    concentration={M.O2: "200 umol/l"},  # initial concentration
    delta={M.O2: 20},
)
ConnectionProperties(  # thermohaline downwelling
    source=M.S_b,  # source of flux
    sink=M.D_b,  # target of flux
    ctype="scale_with_concentration",
    scale="20 Sv",
    id="downwelling"
)
ConnectionProperties(  # thermohaline upwelling
    source=M.D_b,  # source of flux
    sink=M.S_b,  # target of flux
    ctype="scale_with_concentration",
    scale="20 Sv",
    id="upwelling",
)
M.run()
M.plot([M.S_b.O2, M.D_b.O2], fn="iso_1.png")
#+END_SRC
This will result in the following output:
#+attr_org: :width 300
#+attr_rst: :width 400
#+attr_latex: :width 0.5\textwidth
#+name: iso1
#+caption: It takes about 3 kys to equilibrate both ocean boxes.
[[./iso_1.png]]


In the next example, we use two reservoirs of equal size, and equal isotope ratios. This time, we declare that the transport from the =D_b= to =S_b= involves a fractionation of 5\space{}mUr (line 38). Note that the fractionation has to be provided as the enrichment factor \epsilon and not as the fractionation factor \alpha, where 
\[
\epsilon = (\alpha -1) \times 1000
\]
Similarly to the first example, the system reaches equilibrium after about 3\space{}kyrs. The above is then easily adapted to model, e.g., isotope fractionation during the evaporation of water.
#+name:iso2code
#+BEGIN_SRC jupyter-python :tangle iso_2.py :exports none
from esbmtk import (
    Model,  # the model class
    Reservoir,  # the reservoir class
    ConnectionProperties,  # the connection class
    SourceProperties,  # the source class
    SinkProperties,  # sink class
)
M = Model(
    stop="3 kyr",  # end time of model
    max_timestep="100 yr",  # upper limit of time step
    element=["Oxygen"],  # list of element definitions
)
Reservoir(
    name="S_b",  # box name
    volume="50E16 m**3",  # surface box volume
    concentration={M.O2: "200 umol/l"},  # initial concentration
    delta={M.O2: 0},
)
Reservoir(
    name="D_b",  # box name
    volume="50E16 m**3",  # deeb box volume
    concentration={M.O2: "200 umol/l"},  # initial concentration
    delta={M.O2: 0},
)
ConnectionProperties(  # thermohaline downwelling
    source=M.S_b,  # source of flux
    sink=M.D_b,  # target of flux
    ctype="scale_with_concentration",
    scale="20 Sv",
    id="downwelling",
)
ConnectionProperties(  # thermohaline upwelling
    source=M.D_b,  # source of flux
    sink=M.S_b,  # target of flux
    ctype="scale_with_concentration",
    scale="20 Sv",
    id="upwelling",
    epsilon = 5, # mUr
)
M.run()
M.plot([M.S_b.O2, M.D_b.O2], fn="iso_2.png")
#+END_SRC
This will result in the following output:
#+attr_org: :width 300
#+attr_rst: :width 400
#+attr_latex: :width 0.5\textwidth
#+name: iso2
#+caption: It takes about 3 kys to fully fractionate both ocean boxes.
[[./iso_2.png]]

In the last example, we model the oxygen isotope fractionation during the air-sea gas exchange. This involves kinetic fractionation during degassing, and equilibrium fractionation during gas solution. At present, ESBMTK uses the equilibrium fractionation factor parametrization of [[cite:&benson-1984-concen-isotop]]
\[
\alpha_eq =  1 + (-0.73 + (427 / T)) / 1000
\] 

and the kinetic fraction factor of [[cite:&knox-1992-kinet-isotop]]
\[ \alpha_u =  0.9972
\] 
The fractionation factors for CO_{2} follow the parametrization of [[cite:&Zeebe2012]].
Users can provide their own fractionation factor parametrizations by redefining the following variables after model initialization:
#+BEGIN_SRC jupyter-python
M.S_b.swc.o2_a_u =  0.9972 # kinetic fractionation
M.S_b.swc.o2_a_dg = 1.00073 # equilibrium fractionation
#+END_SRC
For carbon there a further variables that define the fractionation between CO2aq and HCO_{3}^{-} and HCO_{3}^{-} and CO_{3}^{2-}. 
(e.g., =...swc.CO_{2}_a_db= and  =...swc.CO_{2}_a_cb=  respectively).
If no such modifications are required, it is sufficient to declare the initial isotope ratio of the atmosphere (line 18) and ocean surface box.

Note however, that in order to calculate gas-exchange fluxes, we need to declare the surface area, of =S_b= (line 22), as well as the pressure, temperature and salinity conditions (line 25). Presently ESBMTK does not support the automatic matching of liquid species to gas reservoirs. Therefore we have to declare each gas-exchange flux individually using the =Species2Species= connection type (line 27 to 33). In the following example the atmosphere equilibrates withe the surface ocean with a couple of months.
#+name:iso3code
#+BEGIN_SRC jupyter-python :tangle iso_3.py :exports none
from esbmtk import (
    Model,  # the model class
    Reservoir,  # the reservoir class
    ConnectionProperties,  # the connection class
    GasReservoir,  # sink class
    Species2Species,
)

M = Model(
    stop="1 yr",  # end time of model
    max_timestep="1 month",  # upper limit of time step
    element=["Oxygen"],  # list of element definitions
)
GasReservoir(
    name="O2_At",
    species=M.O2,
    species_ppm="21 percent",
    delta=0,
)
Reservoir(
    name="S_b",  # box name
    geometry={"area": "2.85e14m**2", "volume": "3E16 m**3"},
    concentration={M.O2: "200 umol/l"},  # initial concentration
    delta={M.O2: 0},
    seawater_parameters={"T": 21.5, "P": 1, "S": 35},
)
Species2Species(  # High Latitude surface to atmosphere F8
    source=M.O2_At,  # Reservoir Species
    sink=M.S_b.O2,  # Reservoir Species
    species=M.O2,
    piston_velocity="4.8 m/d",
    ctype="gasexchange",
    id="ex_O2",
)
M.run()
M.plot([M.S_b.O2, M.O2_At], fn="iso_3.png")
#+END_SRC
This will result in the following output:
#+attr_org: :width 300
#+attr_rst: :width 400
#+attr_latex: :width 0.5\textwidth
#+name: iso3
#+caption: It takes about 3 kys to fully fractionate both ocean boxes.
[[./iso_3.png]]


# define a test function
#+name: testrunner
#+BEGIN_SRC ipython :exports none
# run tests
@pytest.mark.parametrize("test_input, expected", test_values)
def test_values(test_input, expected):
    t = 1e-6
    assert abs(expected) * (1 - t) <= abs(test_input) <= abs(expected) * (1 + t)
#+END_SRC
# create testable script
#+BEGIN_SRC ipython :noweb yes :tangle iso2_test.py :exports none
<<iso2code>>
#+END_SRC

# create testable script
#+BEGIN_SRC ipython :noweb yes :tangle iso3_test.py :exports none
<<iso3code>>
#+END_SRC

# create unit test for iso2 case
#+BEGIN_SRC ipython :noweb yes :tangle test_iso2.py :exports none
import pytest
import  iso2_test # import script

M = iso2_test.M  # get model handle
test_values = [  # result, reference value
    (M.S_b.O2.c[-1], 0.00019999999999999998)
    (M.D_b.O2.c[-1], 0.00019999999999999998)
    (M.S_b.O2.d[-1], 2.4921132299215945)
    (M.D_b.O2.d[-1], -2.492088372772069)
]
<<testrunner>>
#+END_SRC

# create unit test for iso3 case
#+BEGIN_SRC ipython :noweb yes :tangle test_iso3.py :exports none
import pytest
import  iso3_test # import script

M = iso3_test.M  # get model handle
test_values = [  # result, reference value
    (M.S_b.O2.c[-1], 0.0002306171887706928)
    (M.O2_At.c[-1], 0.20999483573786618)
    (M.S_b.O2.d[-1], 0.7204862035835163)
    (M.O2_At.d[-1], -0.0001334598621533160)
]
<<testrunner>>
#+END_SRC
